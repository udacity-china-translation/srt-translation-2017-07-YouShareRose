1
00:00:00,420 --> 00:00:01,690
如果一切都按计划进行

2
00:00:01,690 --> 00:00:04,510
第一个更改不会导致任何用户可见的更改

3
00:00:04,510 --> 00:00:06,400
所以以它完全没有风险

4
00:00:06,400 --> 00:00:07,270
然而 在实践中

5
00:00:07,270 --> 00:00:10,640
如果更改过程中出了问题 那影响将会很严重

6
00:00:10,640 --> 00:00:13,130
你的网站可能下线 或者完全无法运行

7
00:00:13,130 --> 00:00:16,560
当然 在让此类更改影响到用户之前

8
00:00:16,560 --> 00:00:20,030
你始终应该在受控的开发环境中对其进行测试

9
00:00:20,030 --> 00:00:23,750
不过 在实际实施更改后 总是时不时会出现新的漏洞

10
00:00:23,750 --> 00:00:26,720
因此 最佳实践通常是首先针对较少比例的用户尝试推出此类更改

11
00:00:26,720 --> 00:00:28,770
在确定一切正常之后

12
00:00:28,770 --> 00:00:32,020
再向所有用户推送

13
00:00:32,020 --> 00:00:33,720
第二个的风险很低

14
00:00:33,720 --> 00:00:36,950
更改按钮颜色是一件无关紧要的事情 即便所有用户都看到这一更改

15
00:00:36,950 --> 00:00:39,150
也应该没什么关系

16
00:00:39,150 --> 00:00:40,240
然而 就像所有更改一样

17
00:00:40,240 --> 00:00:43,255
在将此更改推送给用户之前 你还是应该进行测试

18
00:00:43,255 --> 00:00:44,782
第三个更改的风险较高

19
00:00:44,782 --> 00:00:47,727
特别是如果你最后并没有全面实施这一更改的话

20
00:00:47,727 --> 00:00:50,453
到时候 你该如何处理那些

21
00:00:50,453 --> 00:00:51,535
你不支持的 Facebook 登录数据？

22
00:00:51,535 --> 00:00:53,665
限制受影响用户的规模

23
00:00:53,665 --> 00:00:57,015
从而你不必设法处理大量此类数据 这是一个好的举措

24
00:00:57,015 --> 00:01:00,190
最后 假设你过去曾开展过类似实验

25
00:01:00,190 --> 00:01:04,920
最后这个更改的风险也很低 因为大多数用户不会注意到排序更改

26
00:01:04,920 --> 00:01:07,100
然而 如果这是你首次测试排序更改

27
00:01:07,100 --> 00:01:10,970
那么这一更改的风险和数据库更改类似 其原因也差不多

28
00:01:10,970 --> 00:01:13,700
例如 如果更改过程出现了漏洞 那么课程可能无法显示
